int *x,*y,*z;
int foo2(int *x,int *y)
{
	return *y;
}
int foo1(int *x,int *y)
{
	
	if ((*x)*2<*y) 
	{
		return *x;
	}
	else 
	{
		return foo2(x,*y+1);
	}
	
}
int foo(int *a,int *b,int *c)
{
	if (*a>*c) 
	{
		return foo1(a,c);
	}
	else
	{
		return foo2(b,c);
	}
}
int main()
{
	x=malloc(sizeof(int));
	y=malloc(sizeof(int));
	z=malloc(sizeof(int));
	int n=10;
	*x=3;*y=4;z=&n;
	int ans=foo(x,y,z);
}
693
translation_unit
 translation_unit
  translation_unit
   translation_unit
    translation_unit
     external_declaration
      declaration
       declaration_specifiers
        INT
       init_declarator_list
        init_declarator_list
         init_declarator_list
          init_declarator
           declarator
            *
            direct_declarator
             x
         init_declarator
          declarator
           *
           direct_declarator
            y
        init_declarator
         declarator
          *
          direct_declarator
           z
    external_declaration
     function_definition
      declaration_specifiers
       INT
      declarator
       direct_declarator
        direct_declarator
         foo2
        parameter_type_list
         parameter_list
          parameter_list
           parameter_declaration
            declaration_specifiers
             INT
            declarator
             *
             direct_declarator
              x
          parameter_declaration
           declaration_specifiers
            INT
           declarator
            *
            direct_declarator
             y
      compound_statement
       block_item_list
        block_item
         statement
          RETURN
           expression
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          *
                          cast_expression
                           unary_expression
                            postfix_expression
                             y
   external_declaration
    function_definition
     declaration_specifiers
      INT
     declarator
      direct_declarator
       direct_declarator
        foo1
       parameter_type_list
        parameter_list
         parameter_list
          parameter_declaration
           declaration_specifiers
            INT
           declarator
            *
            direct_declarator
             x
         parameter_declaration
          declaration_specifiers
           INT
          declarator
           *
           direct_declarator
            y
     compound_statement
      block_item_list
       block_item
        statement
         IF ELSE
          expression
           assignment_expression
            conditional_expression
             logical_or_expression
              logical_and_expression
               inclusive_or_expression
                exclusive_or_expression
                 and_expression
                  equality_expression
                   relational_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        multiplicative_expression
                         cast_expression
                          unary_expression
                           postfix_expression
                            primary_expression
                             expression
                              assignment_expression
                               conditional_expression
                                logical_or_expression
                                 logical_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          cast_expression
                                           unary_expression
                                            *
                                            cast_expression
                                             unary_expression
                                              postfix_expression
                                               x
                        cast_expression
                         unary_expression
                          postfix_expression
                           primary_expression
                            I_CONSTANT
                    shift_expression
                     additive_expression
                      multiplicative_expression
                       cast_expression
                        unary_expression
                         *
                         cast_expression
                          unary_expression
                           postfix_expression
                            y
          statement
           compound_statement
            block_item_list
             block_item
              statement
               RETURN
                expression
                 assignment_expression
                  conditional_expression
                   logical_or_expression
                    logical_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             cast_expression
                              unary_expression
                               *
                               cast_expression
                                unary_expression
                                 postfix_expression
                                  x
          statement
           compound_statement
            block_item_list
             block_item
              statement
               RETURN
                expression
                 assignment_expression
                  conditional_expression
                   logical_or_expression
                    logical_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             cast_expression
                              unary_expression
                               function
                                postfix_expression
                                 foo2
                                argument_expression_list
                                 argument_expression_list
                                  assignment_expression
                                   conditional_expression
                                    logical_or_expression
                                     logical_and_expression
                                      inclusive_or_expression
                                       exclusive_or_expression
                                        and_expression
                                         equality_expression
                                          relational_expression
                                           shift_expression
                                            additive_expression
                                             multiplicative_expression
                                              cast_expression
                                               unary_expression
                                                postfix_expression
                                                 x
                                 assignment_expression
                                  conditional_expression
                                   logical_or_expression
                                    logical_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            additive_expression
                                             multiplicative_expression
                                              cast_expression
                                               unary_expression
                                                *
                                                cast_expression
                                                 unary_expression
                                                  postfix_expression
                                                   y
                                            multiplicative_expression
                                             cast_expression
                                              unary_expression
                                               postfix_expression
                                                primary_expression
                                                 I_CONSTANT
  external_declaration
   function_definition
    declaration_specifiers
     INT
    declarator
     direct_declarator
      direct_declarator
       foo
      parameter_type_list
       parameter_list
        parameter_list
         parameter_list
          parameter_declaration
           declaration_specifiers
            INT
           declarator
            *
            direct_declarator
             a
         parameter_declaration
          declaration_specifiers
           INT
          declarator
           *
           direct_declarator
            b
        parameter_declaration
         declaration_specifiers
          INT
         declarator
          *
          direct_declarator
           c
    compound_statement
     block_item_list
      block_item
       statement
        IF ELSE
         expression
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   relational_expression
                    shift_expression
                     additive_expression
                      multiplicative_expression
                       cast_expression
                        unary_expression
                         *
                         cast_expression
                          unary_expression
                           postfix_expression
                            a
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        *
                        cast_expression
                         unary_expression
                          postfix_expression
                           c
         statement
          compound_statement
           block_item_list
            block_item
             statement
              RETURN
               expression
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              function
                               postfix_expression
                                foo1
                               argument_expression_list
                                argument_expression_list
                                 assignment_expression
                                  conditional_expression
                                   logical_or_expression
                                    logical_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            multiplicative_expression
                                             cast_expression
                                              unary_expression
                                               postfix_expression
                                                a
                                assignment_expression
                                 conditional_expression
                                  logical_or_expression
                                   logical_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            cast_expression
                                             unary_expression
                                              postfix_expression
                                               c
         statement
          compound_statement
           block_item_list
            block_item
             statement
              RETURN
               expression
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              function
                               postfix_expression
                                foo2
                               argument_expression_list
                                argument_expression_list
                                 assignment_expression
                                  conditional_expression
                                   logical_or_expression
                                    logical_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            multiplicative_expression
                                             cast_expression
                                              unary_expression
                                               postfix_expression
                                                b
                                assignment_expression
                                 conditional_expression
                                  logical_or_expression
                                   logical_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            cast_expression
                                             unary_expression
                                              postfix_expression
                                               c
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item_list
        block_item_list
         block_item_list
          block_item_list
           block_item_list
            block_item
             statement
              expression_statement
               expression
                assignment_expression
                 unary_expression
                  postfix_expression
                   x
                 =
                 assignment_expression
                  conditional_expression
                   logical_or_expression
                    logical_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             cast_expression
                              unary_expression
                               function
                                postfix_expression
                                 malloc
                                argument_expression_list
                                 assignment_expression
                                  conditional_expression
                                   logical_or_expression
                                    logical_and_expression
                                     inclusive_or_expression
                                      exclusive_or_expression
                                       and_expression
                                        equality_expression
                                         relational_expression
                                          shift_expression
                                           additive_expression
                                            multiplicative_expression
                                             cast_expression
                                              unary_expression
                                               type_name
                                                specifier_qualifier_list
                                                 INT
           block_item
            statement
             expression_statement
              expression
               assignment_expression
                unary_expression
                 postfix_expression
                  y
                =
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              function
                               postfix_expression
                                malloc
                               argument_expression_list
                                assignment_expression
                                 conditional_expression
                                  logical_or_expression
                                   logical_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            cast_expression
                                             unary_expression
                                              type_name
                                               specifier_qualifier_list
                                                INT
          block_item
           statement
            expression_statement
             expression
              assignment_expression
               unary_expression
                postfix_expression
                 z
               =
               assignment_expression
                conditional_expression
                 logical_or_expression
                  logical_and_expression
                   inclusive_or_expression
                    exclusive_or_expression
                     and_expression
                      equality_expression
                       relational_expression
                        shift_expression
                         additive_expression
                          multiplicative_expression
                           cast_expression
                            unary_expression
                             function
                              postfix_expression
                               malloc
                              argument_expression_list
                               assignment_expression
                                conditional_expression
                                 logical_or_expression
                                  logical_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           cast_expression
                                            unary_expression
                                             type_name
                                              specifier_qualifier_list
                                               INT
         block_item
          declaration
           declaration_specifiers
            INT
           init_declarator_list
            init_declarator
             declarator
              direct_declarator
               n
             initializer1
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            postfix_expression
                             primary_expression
                              I_CONSTANT
        block_item
         statement
          expression_statement
           expression
            assignment_expression
             unary_expression
              *
              cast_expression
               unary_expression
                postfix_expression
                 x
             =
             assignment_expression
              conditional_expression
               logical_or_expression
                logical_and_expression
                 inclusive_or_expression
                  exclusive_or_expression
                   and_expression
                    equality_expression
                     relational_expression
                      shift_expression
                       additive_expression
                        multiplicative_expression
                         cast_expression
                          unary_expression
                           postfix_expression
                            primary_expression
                             I_CONSTANT
       block_item
        statement
         expression_statement
          expression
           assignment_expression
            unary_expression
             *
             cast_expression
              unary_expression
               postfix_expression
                y
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           primary_expression
                            I_CONSTANT
      block_item
       statement
        expression_statement
         expression
          assignment_expression
           unary_expression
            postfix_expression
             z
           =
           assignment_expression
            conditional_expression
             logical_or_expression
              logical_and_expression
               inclusive_or_expression
                exclusive_or_expression
                 and_expression
                  equality_expression
                   relational_expression
                    shift_expression
                     additive_expression
                      multiplicative_expression
                       cast_expression
                        unary_expression
                         &
                         cast_expression
                          unary_expression
                           postfix_expression
                            n
     block_item
      declaration
       declaration_specifiers
        INT
       init_declarator_list
        init_declarator
         declarator
          direct_declarator
           ans
         initializer1
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        function
                         postfix_expression
                          foo
                         argument_expression_list
                          argument_expression_list
                           argument_expression_list
                            assignment_expression
                             conditional_expression
                              logical_or_expression
                               logical_and_expression
                                inclusive_or_expression
                                 exclusive_or_expression
                                  and_expression
                                   equality_expression
                                    relational_expression
                                     shift_expression
                                      additive_expression
                                       multiplicative_expression
                                        cast_expression
                                         unary_expression
                                          postfix_expression
                                           x
                           assignment_expression
                            conditional_expression
                             logical_or_expression
                              logical_and_expression
                               inclusive_or_expression
                                exclusive_or_expression
                                 and_expression
                                  equality_expression
                                   relational_expression
                                    shift_expression
                                     additive_expression
                                      multiplicative_expression
                                       cast_expression
                                        unary_expression
                                         postfix_expression
                                          y
                          assignment_expression
                           conditional_expression
                            logical_or_expression
                             logical_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      cast_expression
                                       unary_expression
                                        postfix_expression
                                         z
=========Next[4]->29==========
=========Next[2]->30==========
=========Next[20]->31==========
final analysis!========================
=====bd28cf20=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===
1 
===def===

===use===

===pure===

===you can ues===

  To bd27fae0
=====bd27fae0=====
line=1
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -2 -3 5 -1
===dec===
2 
===def===

===use===

===pure===

===you can ues===
2 
  To bd27fc70
=====bd27fc70=====
line=1
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===
3 
===def===

===use===

===pure===

===you can ues===
3 2 
  To bd27fe60
=====bd27fe60=====
line=1
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -2 -3 5 -1
===dec===
4 
===def===

===use===

===pure===

===you can ues===
4 3 2 
  To bd28d0b0
=====bd28d0b0=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===

===def===

===use===

===pure===

===you can ues===
4 3 2 
  To bd28d3d0
=====bd28d3d0=====
!!Left:100008!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -2 -3 5 -1
===dec===

===def===

===use===

===pure===

===you can ues===
4 3 2 
  To bd28d560
=====bd28d560=====
line=100032
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===

===def===
[2 unary:0] 
===use===
[-1 unary:1] 
===pure===
([2 unary:0],[-1 unary:1]) 
===you can ues===
4 3 2 
  To bd28d7f0
=====bd28d7f0=====
line=100033
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4:
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -2 -3 5 -1
===dec===

===def===
[3 unary:0] 
===use===
[-2 unary:1] 
===pure===
([3 unary:0],[-2 unary:1]) 
===you can ues===
4 3 2 
  To bd28dac0
=====bd28dac0=====
line=100034
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===

===def===
[4 unary:0] 
===use===
[-3 unary:1] 
===pure===
([4 unary:0],[-3 unary:1]) 
===you can ues===
4 3 2 
  To bd28de20
=====bd28de20=====
line=100035
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -2 -3 5 -1
===dec===
5 
===def===

===use===

===pure===

===you can ues===
13 4 3 2 
  To bd28e090
=====bd28e090=====
line=100035
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===

===def===

===use===
[0 unary:0] 
===pure===

===you can ues===
13 4 3 2 
  To bd28e2e0
=====bd28e2e0=====
line=100035
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -2 -3 5 -1
===dec===

===def===
[5 unary:0] 
===use===
[0 unary:0] 
===pure===
([5 unary:0],[0 unary:0]) 
===you can ues===
13 4 3 2 
  To bd28e640
=====bd28e640=====
line=100036
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===

===def===
[2 unary:1] 
===use===
[0 unary:0] 
===pure===
([2 unary:1],[0 unary:0]) 
===you can ues===
13 4 3 2 
  To bd28e9a0
=====bd28e9a0=====
line=100036
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
===G2===

===G3===
 -1 5 -3 -2
===dec===

===def===
[3 unary:1] 
===use===
[0 unary:0] 
===pure===
([3 unary:1],[0 unary:0]) 
===you can ues===
13 4 3 2 
  To bd28ed00
=====bd28ed00=====
line=100036
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===

===def===
[4 unary:0] 
===use===
[5 unary:1] 
===pure===
([4 unary:0],[5 unary:1]) 
===you can ues===
13 4 3 2 
  To bd28f060
=====bd28f060=====
line=100037
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===
6 
===def===

===use===

===pure===

===you can ues===
14 13 4 3 2 
  To bd28f330
=====bd28f330=====
line=100037
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===

===def===

===use===
[2 unary:0] 
===pure===

===you can ues===
14 13 4 3 2 
  To bd28f580
=====bd28f580=====
line=100037
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===

===def===

===use===
[3 unary:0] 
===pure===

===you can ues===
14 13 4 3 2 
  To bd28f7d0
=====bd28f7d0=====
line=100037
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===

===def===

===use===
[4 unary:0] 
===pure===

===you can ues===
14 13 4 3 2 
  To bd28fa20
=====bd28fa20=====
line=100037
tag=7
call_index=4
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===
7 8 9 10 
===def===
[7 unary:0] [8 unary:0] [9 unary:0] 
===use===
[2 unary:0] [3 unary:0] [4 unary:0] 
===pure===
([7 unary:0],[2 unary:0]) ([8 unary:0],[3 unary:0]) ([9 unary:0],[4 unary:0]) 
===you can ues===
14 13 4 3 2 
  To bd2907e0
=====bd2907e0=====
!!Left:200005!!
line=200000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===
11 12 13 
===def===
[11 unary:0] [12 unary:0] [13 unary:0] 
===use===
[7 unary:0] [8 unary:0] [9 unary:0] 
===pure===
([11 unary:0],[7 unary:0]) ([12 unary:0],[8 unary:0]) ([13 unary:0],[9 unary:0]) 
===you can ues===
10 9 8 14 13 4 3 2 
  To bd290da0
=====bd290da0=====
line=200021
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===

===def===

===use===
[11 unary:1] [13 unary:1] 
===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd290fa0
  To bd291ea0
=====bd290fa0=====
!!Left:200006!!
line=200000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===

===def===

===use===

===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd291130
=====bd291130=====
line=200023
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===

===def===

===use===
[11 unary:0] 
===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd291300
=====bd291300=====
line=200023
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===

===def===

===use===
[13 unary:0] 
===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd2914d0
=====bd2914d0=====
line=200023
tag=6
call_index=2
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===
14 15 16 
===def===
[14 unary:0] [15 unary:0] 
===use===
[11 unary:0] [13 unary:0] 
===pure===
([14 unary:0],[11 unary:0]) ([15 unary:0],[13 unary:0]) 
===you can ues===
10 9 8 14 13 4 3 2 
  To bd292d90
=====bd292d90=====
!!Left:300002!!
line=300000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17: -1
  18: 5 -3
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -3 5 -1
===dec===
17 18 
===def===
[17 unary:0] [18 unary:0] 
===use===
[14 unary:0] [15 unary:0] 
===pure===
([17 unary:0],[14 unary:0]) ([18 unary:0],[15 unary:0]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd293210
=====bd293210=====
line=300009
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17: -1
  18: -3 5
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1 5 -3
===dec===

===def===

===use===
[17 unary:1] [0 unary:0] [18 unary:1] 
===pure===

===you can ues===
3 2 10 9 8 14 13 4 
  To bd293440
  To bd293aa0
=====bd293440=====
!!Left:300003!!
line=300000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17: -1
  18: 5 -3
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===
3 2 10 9 8 14 13 4 
  To bd2935d0
=====bd2935d0=====
line=300011
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17: -1
  18: -3 5
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
===G2===

===G3===
 -1
===dec===

===def===
[16 unary:0] 
===use===
[17 unary:1] 
===pure===
([16 unary:0],[17 unary:1]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd2938d0
=====bd2938d0=====
!!Right:300002!!
line=300000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd291970
=====bd291970=====
line=200023
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===
[10 unary:0] 
===use===
[16 unary:0] 
===pure===
([10 unary:0],[16 unary:0]) 
===you can ues===
10 9 8 14 13 4 3 2 
  To bd291cd0
=====bd291cd0=====
!!Right:200005!!
line=200000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24: -2
  25: -3 5
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
14 13 4 3 2 
  To bd290020
=====bd290020=====
line=100037
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24: -2
  25: 5 -3
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===
[10 unary:0] 
===pure===

===you can ues===
14 13 4 3 2 
  To bd290270
=====bd290270=====
line=100037
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24: -2
  25: -3 5
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===
[6 unary:0] 
===use===
[10 unary:0] 
===pure===
([6 unary:0],[10 unary:0]) 
===you can ues===
14 13 4 3 2 
  To bd2905d0
=====bd2905d0=====
!!Right:100008!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24: -2
  25: 5 -3
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
4 3 2 
  To bd28d240
=====bd28d240=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7:
  8:
  9:
  10:
  11:
  12:
  13:
  14:
  15:
  16:
  17:
  18:
  19: -1
  20:
  21:
  22:
  23:
  24: -2
  25: -3 5
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
4 3 2 
=====bd293aa0=====
!!Left:300004!!
line=300000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17: -1
  18: 5 -3
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
===G2===

===G3===
 5 -3
===dec===

===def===

===use===

===pure===

===you can ues===
3 2 10 9 8 14 13 4 
  To bd293c90
=====bd293c90=====
line=300015
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17: -1
  18: -3 5
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
===G2===

===G3===
 -3 5
===dec===

===def===

===use===
[17 unary:0] 
===pure===

===you can ues===
3 2 10 9 8 14 13 4 
  To bd293ee0
=====bd293ee0=====
line=300015
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17: -1
  18: 5 -3
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
===G2===

===G3===
 5 -3
===dec===

===def===

===use===
[18 unary:1] [0 unary:0] 
===pure===

===you can ues===
3 2 10 9 8 14 13 4 
  To bd294180
=====bd294180=====
line=300015
tag=5
call_index=1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17: -1
  18: -3 5
  19: -1
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
===G2===

===G3===

===dec===
19 20 21 
===def===
[19 unary:0] [20 unary:0] 
===use===
[17 unary:0] [0 unary:0] 
===pure===
([19 unary:0],[17 unary:0]) ([20 unary:0],[0 unary:0]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd2949e0
=====bd2949e0=====
!!Left:400001!!
line=400000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17: -1
  18: 5 -3
  19: -1
  20:
  21:
  22: -1
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
===G2===

===G3===

===dec===
22 23 
===def===
[22 unary:0] [23 unary:0] 
===use===
[19 unary:0] [20 unary:0] 
===pure===
([22 unary:0],[19 unary:0]) ([23 unary:0],[20 unary:0]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd294e60
=====bd294e60=====
line=400004
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17: -1
  18: -3 5
  19: -1
  20:
  21:
  22: -1
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===
[21 unary:0] 
===use===
[23 unary:1] 
===pure===
([21 unary:0],[23 unary:1]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd2950e0
=====bd2950e0=====
!!Right:400001!!
line=400000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14: -1
  15: 5 -3
  16:
  17: -1
  18: 5 -3
  19: -1
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
3 2 10 9 8 14 13 4 
  To bd294640
=====bd294640=====
line=300015
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14: -1
  15: -3 5
  16:
  17: -1
  18: -3 5
  19: -1
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===
[16 unary:0] 
===use===
[21 unary:0] 
===pure===
([16 unary:0],[21 unary:0]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd2938d0
=====bd291ea0=====
!!Left:200007!!
line=200000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===
 5 -3
===dec===

===def===

===use===

===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd292090
=====bd292090=====
line=200027
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===
 -3 5
===dec===

===def===

===use===
[12 unary:0] 
===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd2922e0
=====bd2922e0=====
line=200027
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24:
  25:
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===
 5 -3
===dec===

===def===

===use===
[13 unary:0] 
===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd292530
=====bd292530=====
line=200027
tag=5
call_index=3
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24: -2
  25: 5 -3
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===
 -3 5
===dec===
24 25 26 
===def===
[24 unary:0] [25 unary:0] 
===use===
[12 unary:0] [13 unary:0] 
===pure===
([24 unary:0],[12 unary:0]) ([25 unary:0],[13 unary:0]) 
===you can ues===
10 9 8 14 13 4 3 2 
  To bd295350
=====bd295350=====
!!Left:500001!!
line=500000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24: -2
  25: 5 -3
  26:
  27: -2
  28: 5 -3
  29:
  30:
  31:
===G2===

===G3===
 5 -3
===dec===
27 28 
===def===
[27 unary:0] [28 unary:0] 
===use===
[24 unary:0] [25 unary:0] 
===pure===
([27 unary:0],[24 unary:0]) ([28 unary:0],[25 unary:0]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd2957b0
=====bd2957b0=====
line=500004
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24: -2
  25: -3 5
  26:
  27: -2
  28: -3 5
  29:
  30:
  31:
===G2===

===G3===
 -3 5
===dec===

===def===
[26 unary:0] 
===use===
[28 unary:1] 
===pure===
([26 unary:0],[28 unary:1]) 
===you can ues===
3 2 10 9 8 14 13 4 
  To bd295ad0
=====bd295ad0=====
!!Right:500001!!
line=500000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: 5 -3
  5:
  6:
  7: -1
  8: -2
  9: 5 -3
  10:
  11: -1
  12: -2
  13: 5 -3
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24: -2
  25: 5 -3
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
10 9 8 14 13 4 3 2 
  To bd2929f0
=====bd2929f0=====
line=200027
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -2
  4: -3 5
  5:
  6:
  7: -1
  8: -2
  9: -3 5
  10:
  11: -1
  12: -2
  13: -3 5
  14:
  15:
  16:
  17:
  18:
  19:
  20:
  21:
  22:
  23:
  24: -2
  25: -3 5
  26:
  27:
  28:
  29:
  30:
  31:
===G2===

===G3===

===dec===

===def===
[10 unary:0] 
===use===
[26 unary:0] 
===pure===
([10 unary:0],[26 unary:0]) 
===you can ues===
10 9 8 14 13 4 3 2 
  To bd291cd0
