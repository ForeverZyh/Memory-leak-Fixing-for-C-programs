int *x;
int a()
{
	
}
int b()
{
	a();
}
int main()
{
	x=malloc(sizeof(int));
	a();
	*x=1;
	b();
	return 0;
}
184
translation_unit
 translation_unit
  translation_unit
   translation_unit
    external_declaration
     declaration
      declaration_specifiers
       INT
      init_declarator_list
       init_declarator
        declarator
         *
         direct_declarator
          x
   external_declaration
    function_definition
     declaration_specifiers
      INT
     declarator
      direct_declarator
       direct_declarator
        a
     {
  external_declaration
   function_definition
    declaration_specifiers
     INT
    declarator
     direct_declarator
      direct_declarator
       b
    compound_statement
     block_item_list
      block_item
       statement
        expression_statement
         expression
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        function
                         postfix_expression
                          a
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item_list
        block_item_list
         block_item
          statement
           expression_statement
            expression
             assignment_expression
              unary_expression
               postfix_expression
                x
              =
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            function
                             postfix_expression
                              malloc
                             argument_expression_list
                              assignment_expression
                               conditional_expression
                                logical_or_expression
                                 logical_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          cast_expression
                                           unary_expression
                                            type_name
                                             specifier_qualifier_list
                                              INT
        block_item
         statement
          expression_statement
           expression
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          function
                           postfix_expression
                            a
       block_item
        statement
         expression_statement
          expression
           assignment_expression
            unary_expression
             *
             cast_expression
              unary_expression
               postfix_expression
                x
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           primary_expression
                            I_CONSTANT
      block_item
       statement
        expression_statement
         expression
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        function
                         postfix_expression
                          b
     block_item
      statement
       RETURN
        expression
         assignment_expression
          conditional_expression
           logical_or_expression
            logical_and_expression
             inclusive_or_expression
              exclusive_or_expression
               and_expression
                equality_expression
                 relational_expression
                  shift_expression
                   additive_expression
                    multiplicative_expression
                     cast_expression
                      unary_expression
                       postfix_expression
                        primary_expression
                         I_CONSTANT
final analysis!========================
=====3c3f87c0=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===
1 
===def===

===use===

===pure===

===you can ues===

  To 3c3f6e80
=====3c3f6e80=====
line=1
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===
2 
===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fb290
=====3c3fb290=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fb5b0
=====3c3fb5b0=====
!!Left:100002!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fb7a0
=====3c3fb7a0=====
line=100012
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===
[2 unary:0] 
===use===
[-1 unary:1] 
===pure===
([2 unary:0],[-1 unary:1]) 
===you can ues===
2 
  To 3c3fbaf0
=====3c3fbaf0=====
line=100013
tag=3
call_index=2
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===
3 
===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fccc0
=====3c3fccc0=====
line=200000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fce70
=====3c3fce70=====
line=200000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fbce0
=====3c3fbce0=====
line=100013
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===

===use===
[3 unary:0] 
===pure===

===you can ues===
2 
  To 3c3fbf30
=====3c3fbf30=====
line=100014
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===
 -1
===dec===

===def===
[2 unary:1] 
===use===
[0 unary:0] 
===pure===
([2 unary:1],[0 unary:0]) 
===you can ues===
2 
  To 3c3fc2f0
=====3c3fc2f0=====
line=100015
tag=4
call_index=3
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===
4 
===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fd040
=====3c3fd040=====
!!Left:300001!!
line=300000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fd1d0
=====3c3fd1d0=====
line=300008
tag=3
call_index=1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===
5 
===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fd7c0
=====3c3fd7c0=====
line=400000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fd970
=====3c3fd970=====
line=400000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fd360
=====3c3fd360=====
line=300008
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===
[5 unary:0] 
===pure===

===you can ues===
2 
  To 3c3fd5b0
=====3c3fd5b0=====
!!Right:300001!!
line=300000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fc500
=====3c3fc500=====
line=100015
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===
[4 unary:0] 
===pure===

===you can ues===
2 
  To 3c3fc750
=====3c3fc750=====
line=100016
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===
[1 unary:0] 
===use===
[0 unary:0] 
===pure===
([1 unary:0],[0 unary:0]) 
===you can ues===
2 
  To 3c3fcab0
=====3c3fcab0=====
!!Right:100002!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To 3c3fb420
=====3c3fb420=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
  4:
  5:
===G2===

===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
