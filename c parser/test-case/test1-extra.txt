int main()
{
	int *x=malloc(sizeof(int)),*y;
	y=x;
	free(x);
	return 0;
}
136
translation_unit
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item_list
        block_item
         declaration
          declaration_specifiers
           INT
          init_declarator_list
           init_declarator_list
            init_declarator
             declarator
              *
              direct_declarator
               x
             initializer1
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            function
                             postfix_expression
                              malloc
                             argument_expression_list
                              assignment_expression
                               conditional_expression
                                logical_or_expression
                                 logical_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          cast_expression
                                           unary_expression
                                            type_name
                                             specifier_qualifier_list
                                              INT
           init_declarator
            declarator
             *
             direct_declarator
              y
       block_item
        statement
         expression_statement
          expression
           assignment_expression
            unary_expression
             postfix_expression
              y
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           x
      block_item
       statement
        expression_statement
         expression
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        function
                         postfix_expression
                          free
                         argument_expression_list
                          assignment_expression
                           conditional_expression
                            logical_or_expression
                             logical_and_expression
                              inclusive_or_expression
                               exclusive_or_expression
                                and_expression
                                 equality_expression
                                  relational_expression
                                   shift_expression
                                    additive_expression
                                     multiplicative_expression
                                      cast_expression
                                       unary_expression
                                        postfix_expression
                                         x
     block_item
      statement
       RETURN
        expression
         assignment_expression
          conditional_expression
           logical_or_expression
            logical_and_expression
             inclusive_or_expression
              exclusive_or_expression
               and_expression
                equality_expression
                 relational_expression
                  shift_expression
                   additive_expression
                    multiplicative_expression
                     cast_expression
                      unary_expression
                       postfix_expression
                        primary_expression
                         I_CONSTANT
1
final analysis!========================
=====31a20f50=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===

===G3===
 -1
===dec===
1 
===def===

===use===

===pure===

===you can ues===

  To 31a21140
=====31a21140=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===

  To 31a21460
=====31a21460=====
!!Left:100001!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===

===G3===
 -1
===dec===

===def===

===use===

===pure===

===you can ues===

  To 31a21650
=====31a21650=====
line=100003
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===

===G3===
 -1
===dec===
2 
===def===

===use===

===pure===

===you can ues===
3 
  To 31a21860
=====31a21860=====
line=100003
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===

===G3===
 -1
===dec===

===def===

===use===
[-1 unary:1] 
===pure===

===you can ues===
3 
  To 31a21a50
=====31a21a50=====
line=100003
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
===G2===

===G3===
 -1
===dec===

===def===
[2 unary:0] 
===use===
[-1 unary:1] 
===pure===
([2 unary:0],[-1 unary:1]) 
===you can ues===
3 
  To 31a21db0
=====31a21db0=====
line=100003
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3:
===G2===

===G3===
 -1
===dec===
3 
===def===

===use===

===pure===

===you can ues===
5 3 
  To 31a22020
=====31a22020=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -1
===G2===

===G3===
 -1
===dec===

===def===
[3 unary:0] 
===use===
[2 unary:0] 
===pure===
([3 unary:0],[2 unary:0]) 
===you can ues===
5 3 
  To 31a22380
=====31a22380=====
line=100005
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -1
===G2===
 -1
===G3===
 -1
===dec===

===def===
[2 unary:0] 
===use===
[2 unary:0] 
===pure===
([2 unary:0],[-999999 unary:1]) 
===you can ues===
5 3 
  To 31a226e0
=====31a226e0=====
line=100006
tag=-1
call_index=-1
===G1===
  1:
  2: -1
  3: -1
===G2===
 -1
===G3===

===dec===

===def===
[1 unary:0] 
===use===
[0 unary:0] 
===pure===
([1 unary:0],[0 unary:0]) 
===you can ues===
5 3 
  To 31a22a40
=====31a22a40=====
!!Right:100001!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===
 -1
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===

  To 31a212d0
=====31a212d0=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
===G2===
 -1
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===

