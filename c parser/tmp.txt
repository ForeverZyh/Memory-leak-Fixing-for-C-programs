int a;
int main()
{
	unsigned int *x=&a,*y,*z;
	x=y=z;
	if (x)
	{
		z=malloc(sizeof(unsigned int));
	}
	else
	{
		return 0;
	}
}
167
translation_unit
 translation_unit
  external_declaration
   declaration
    declaration_specifiers
     INT
    init_declarator_list
     init_declarator
      declarator
       direct_declarator
        a
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item
        declaration
         declaration_specifiers
          UNSIGNED
          declaration_specifiers
           INT
         init_declarator_list
          init_declarator_list
           init_declarator_list
            init_declarator
             declarator
              *
              direct_declarator
               x
             initializer1
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            &
                            cast_expression
                             unary_expression
                              postfix_expression
                               a
           init_declarator
            declarator
             *
             direct_declarator
              y
          init_declarator
           declarator
            *
            direct_declarator
             z
      block_item
       statement
        expression_statement
         expression
          assignment_expression
           unary_expression
            postfix_expression
             x
           =
           assignment_expression
            unary_expression
             postfix_expression
              y
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           z
     block_item
      statement
       IF ELSE
        expression
         assignment_expression
          conditional_expression
           logical_or_expression
            logical_and_expression
             inclusive_or_expression
              exclusive_or_expression
               and_expression
                equality_expression
                 relational_expression
                  shift_expression
                   additive_expression
                    multiplicative_expression
                     cast_expression
                      unary_expression
                       postfix_expression
                        x
        statement
         compound_statement
          block_item_list
           block_item
            statement
             expression_statement
              expression
               assignment_expression
                unary_expression
                 postfix_expression
                  z
                =
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              postfix_expression
                               postfix_expression
                                malloc
                               argument_expression_list
                                assignment_expression
                                 conditional_expression
                                  logical_or_expression
                                   logical_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            cast_expression
                                             unary_expression
                                              type_name
                                               specifier_qualifier_list
                                                UNSIGNED
                                                specifier_qualifier_list
                                                 INT
          }
        statement
         compound_statement
          block_item_list
           block_item
            statement
             RETURN
              expression
               assignment_expression
                conditional_expression
                 logical_or_expression
                  logical_and_expression
                   inclusive_or_expression
                    exclusive_or_expression
                     and_expression
                      equality_expression
                       relational_expression
                        shift_expression
                         additive_expression
                          multiplicative_expression
                           cast_expression
                            unary_expression
                             postfix_expression
                              primary_expression
                               I_CONSTANT
          }
    }
1
=====edb053f0=====
===dec===

===def===

===use===

===pure===

  To edb055a0
=====edb055a0=====
===dec===

===def===

===use===

===pure===

  To edb056e0
=====edb056e0=====
===dec===
3 4 5 
===def===
3 
===use===
1 
===pure===
(3,1) 
  To edb05640
=====edb05640=====
===dec===

===def===

===use===

===pure===

  To edb05ea0
=====edb05ea0=====
===dec===

===def===

===use===

===pure===

  To edb061c0
=====edb061c0=====
===dec===

===def===
4 3 
===use===
5 
===pure===
(4,5) (3,4) 
  To edb06120
=====edb06120=====
===dec===

===def===

===use===

===pure===

  To edb066b0
=====edb066b0=====
===dec===

===def===

===use===

===pure===

  To edb067f0
=====edb067f0=====
===dec===

===def===

===use===
3 
===pure===

  To edb06930
  To edb07090
=====edb06930=====
===dec===

===def===

===use===

===pure===

  To edb06a70
=====edb06a70=====
===dec===

===def===

===use===

===pure===

  To edb06bb0
=====edb06bb0=====
===dec===

===def===
5 
===use===
6 
===pure===
(5,6) 
  To edb06b10
=====edb06b10=====
===dec===

===def===

===use===

===pure===

  To edb069d0
=====edb069d0=====
!!}!!
===dec===

===def===

===use===

===pure===

  To edb06890
=====edb06890=====
===dec===

===def===

===use===

===pure===

  To edb06750
=====edb06750=====
===dec===

===def===

===use===

===pure===

  To edb05490
=====edb05490=====
!!}!!
===dec===

===def===

===use===

===pure===

=====edb07090=====
===dec===

===def===

===use===

===pure===

  To edb071d0
=====edb071d0=====
===dec===

===def===

===use===

===pure===

  To edb05490
=====edb05490=====
!!}!!
===dec===

===def===

===use===

===pure===

