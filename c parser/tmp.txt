int *x;
int main()
{
	int *y=malloc(sizeof(int));
	x=malloc(sizeof(int));
	*x=0;
	*y=1;
	if (*x>*y)
	{
		int *z=malloc(sizeof(int));
		*z=*y;
	}
	else
	{
		x=y;
		//free(y);
	}
	/*
	return 0;
}304
translation_unit
 translation_unit
  external_declaration
   declaration
    declaration_specifiers
     INT
    init_declarator_list
     init_declarator
      declarator
       *
       direct_declarator
        x
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item_list
        block_item_list
         block_item_list
          block_item
           declaration
            declaration_specifiers
             INT
            init_declarator_list
             init_declarator
              declarator
               *
               direct_declarator
                y
              initializer1
               assignment_expression
                conditional_expression
                 logical_or_expression
                  logical_and_expression
                   inclusive_or_expression
                    exclusive_or_expression
                     and_expression
                      equality_expression
                       relational_expression
                        shift_expression
                         additive_expression
                          multiplicative_expression
                           cast_expression
                            unary_expression
                             function
                              postfix_expression
                               malloc
                              argument_expression_list
                               assignment_expression
                                conditional_expression
                                 logical_or_expression
                                  logical_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           cast_expression
                                            unary_expression
                                             type_name
                                              specifier_qualifier_list
                                               INT
         block_item
          statement
           expression_statement
            expression
             assignment_expression
              unary_expression
               postfix_expression
                x
              =
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            function
                             postfix_expression
                              malloc
                             argument_expression_list
                              assignment_expression
                               conditional_expression
                                logical_or_expression
                                 logical_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          cast_expression
                                           unary_expression
                                            type_name
                                             specifier_qualifier_list
                                              INT
        block_item
         statement
          expression_statement
           expression
            assignment_expression
             unary_expression
              *
              cast_expression
               unary_expression
                postfix_expression
                 x
             =
             assignment_expression
              conditional_expression
               logical_or_expression
                logical_and_expression
                 inclusive_or_expression
                  exclusive_or_expression
                   and_expression
                    equality_expression
                     relational_expression
                      shift_expression
                       additive_expression
                        multiplicative_expression
                         cast_expression
                          unary_expression
                           postfix_expression
                            primary_expression
                             I_CONSTANT
       block_item
        statement
         expression_statement
          expression
           assignment_expression
            unary_expression
             *
             cast_expression
              unary_expression
               postfix_expression
                y
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           primary_expression
                            I_CONSTANT
      block_item
       statement
        IF ELSE
         expression
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   relational_expression
                    shift_expression
                     additive_expression
                      multiplicative_expression
                       cast_expression
                        unary_expression
                         *
                         cast_expression
                          unary_expression
                           postfix_expression
                            x
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        *
                        cast_expression
                         unary_expression
                          postfix_expression
                           y
         statement
          compound_statement
           block_item_list
            block_item_list
             block_item
              declaration
               declaration_specifiers
                INT
               init_declarator_list
                init_declarator
                 declarator
                  *
                  direct_declarator
                   z
                 initializer1
                  assignment_expression
                   conditional_expression
                    logical_or_expression
                     logical_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              cast_expression
                               unary_expression
                                function
                                 postfix_expression
                                  malloc
                                 argument_expression_list
                                  assignment_expression
                                   conditional_expression
                                    logical_or_expression
                                     logical_and_expression
                                      inclusive_or_expression
                                       exclusive_or_expression
                                        and_expression
                                         equality_expression
                                          relational_expression
                                           shift_expression
                                            additive_expression
                                             multiplicative_expression
                                              cast_expression
                                               unary_expression
                                                type_name
                                                 specifier_qualifier_list
                                                  INT
            block_item
             statement
              expression_statement
               expression
                assignment_expression
                 unary_expression
                  *
                  cast_expression
                   unary_expression
                    postfix_expression
                     z
                 =
                 assignment_expression
                  conditional_expression
                   logical_or_expression
                    logical_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             cast_expression
                              unary_expression
                               *
                               cast_expression
                                unary_expression
                                 postfix_expression
                                  y
         statement
          compound_statement
           block_item_list
            block_item
             statement
              expression_statement
               expression
                assignment_expression
                 unary_expression
                  postfix_expression
                   x
                 =
                 assignment_expression
                  conditional_expression
                   logical_or_expression
                    logical_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             cast_expression
                              unary_expression
                               postfix_expression
                                y
     block_item
      statement
       RETURN
        expression
         assignment_expression
          conditional_expression
           logical_or_expression
            logical_and_expression
             inclusive_or_expression
              exclusive_or_expression
               and_expression
                equality_expression
                 relational_expression
                  shift_expression
                   additive_expression
                    multiplicative_expression
                     cast_expression
                      unary_expression
                       postfix_expression
                        primary_expression
                         I_CONSTANT
1
=========Next[4]->6==========
=========Next[3]->7==========
final analysis!========================
=====b576da40=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===G2===

===G3===
 -2 -3 -1
===dec===
1 
===def===

===use===

===pure===

===you can ues===

  To b5768030
=====b5768030=====
line=1
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===G2===

===G3===
 -1 -3 -2
===dec===
2 
===def===

===use===

===pure===

===you can ues===
2 
  To b576dc40
=====b576dc40=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===G2===

===G3===
 -2 -3 -1
===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To b576df40
=====b576df40=====
!!Left:100001!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===G2===

===G3===
 -1 -3 -2
===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To b576e120
=====b576e120=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===G2===

===G3===
 -2 -3 -1
===dec===
4 
===def===

===use===

===pure===

===you can ues===
4 2 
  To b576e350
=====b576e350=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===G2===

===G3===
 -1 -3 -2
===dec===

===def===

===use===
[-1 unary:1] 
===pure===

===you can ues===
4 2 
  To b576e530
=====b576e530=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2:
  3: -1
  4:
===G2===

===G3===
 -2 -3 -1
===dec===

===def===
[3 unary:0] 
===use===
[-1 unary:1] 
===pure===
([3 unary:0],[-1 unary:1]) 
===you can ues===
4 2 
  To b576e880
=====b576e880=====
line=100005
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===

===G3===
 -1 -3 -2
===dec===

===def===
[2 unary:0] 
===use===
[-2 unary:1] 
===pure===
([2 unary:0],[-2 unary:1]) 
===you can ues===
4 2 
  To b576ec30
=====b576ec30=====
line=100006
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===

===G3===
 -2 -3 -1
===dec===

===def===
[2 unary:1] 
===use===
[0 unary:0] 
===pure===
([2 unary:1],[0 unary:0]) 
===you can ues===
4 2 
  To b576ef80
=====b576ef80=====
line=100007
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===

===G3===
 -1 -3 -2
===dec===

===def===
[3 unary:1] 
===use===
[0 unary:0] 
===pure===
([3 unary:1],[0 unary:0]) 
===you can ues===
4 2 
  To b576f2d0
=====b576f2d0=====
line=100008
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===

===G3===
 -2 -3 -1
===dec===

===def===

===use===
[2 unary:1] [3 unary:1] 
===pure===

===you can ues===
4 2 
  To b576f560
  To b5770bb0
=====b576f560=====
!!Left:100002!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===

===G3===
 -2 -1 -3
===dec===

===def===

===use===

===pure===

===you can ues===
4 2 
  To b5775f30
=====b5775f30=====
line=100010
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===
 -2
===G3===
 -2 -3 -1
===dec===

===def===

===use===

===pure===

===you can ues===

  To b576f740
=====b576f740=====
line=100011
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===
 -2
===G3===
 -1 -3
===dec===
6 
===def===

===use===

===pure===

===you can ues===
6 4 2 
  To b576f940
=====b576f940=====
line=100011
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===G2===
 -2
===G3===
 -3 -1
===dec===

===def===

===use===
[-3 unary:1] 
===pure===

===you can ues===
6 4 2 
  To b576fc40
=====b576fc40=====
line=100011
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
===G2===
 -2
===G3===
 -1 -3
===dec===

===def===
[4 unary:0] 
===use===
[-3 unary:1] 
===pure===
([4 unary:0],[-3 unary:1]) 
===you can ues===
6 4 2 
  To b576ff90
=====b576ff90=====
line=100012
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
  5:
  6:
  7:
===G2===
 -2
===G3===
 -3 -1
===dec===

===def===
[4 unary:1] 
===use===
[3 unary:1] 
===pure===
([4 unary:1],[3 unary:1]) 
===you can ues===
6 4 2 
  To b57545f0
=====b57545f0=====
line=100013
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
  5:
  6:
  7:
===G2===
 -1 -2
===G3===
 -1 -3
===dec===

===def===

===use===

===pure===

===you can ues===

  To b5776d90
=====b5776d90=====
line=100014
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
  5:
  6:
  7:
===G2===
 -1 -3 -2
===G3===
 -3
===dec===

===def===

===use===

===pure===

===you can ues===

  To b57702e0
=====b57702e0=====
!!Right:100002!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
  5:
  6:
  7:
===G2===
 -1 -2 -3
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
4 2 
  To b57704c0
=====b57704c0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4: -3
  5:
  6:
  7:
===G2===
 -2 -1 -3
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
4 2 
  To b57706a0
=====b57706a0=====
line=100028
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4: -3
  5:
  6:
  7:
===G2===
 -3 -2 -1
===G3===

===dec===

===def===
[1 unary:0] 
===use===
[0 unary:0] 
===pure===
([1 unary:0],[0 unary:0]) 
===you can ues===
4 2 
  To b57709f0
=====b57709f0=====
!!Right:100001!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4: -3
  5:
  6:
  7:
===G2===
 -3 -2 -1
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
  To b576ddc0
=====b576ddc0=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4: -3
  5:
  6:
  7:
===G2===
 -3 -2 -1
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
2 
=====b5770bb0=====
!!Left:100003!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
  5:
  6:
  7:
===G2===

===G3===
 -1 -2
===dec===

===def===

===use===

===pure===

===you can ues===
4 2 
  To b5776620
=====b5776620=====
line=100018
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
  5:
  6:
  7:
===G2===
 -2 -1
===G3===
 -2 -1
===dec===

===def===

===use===

===pure===

===you can ues===

  To b5770d90
=====b5770d90=====
line=100019
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4:
  5:
  6:
  7:
===G2===
 -1 -2
===G3===

===dec===

===def===
[2 unary:0] 
===use===
[3 unary:0] 
===pure===
([2 unary:0],[3 unary:0]) 
===you can ues===
4 2 
  To b57710e0
=====b57710e0=====
!!Right:100003!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2 -1
  3: -2 -1
  4:
  5:
  6:
  7:
===G2===
 -2 -1
===G3===

===dec===

===def===

===use===

===pure===

===you can ues===
4 2 
  To b57704c0
