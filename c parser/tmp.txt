int *x;
int main()
{
	int *y=malloc(sizeof(int));
	x=malloc(sizeof(int));
	int a=1;
	*y=2;
	if (*y>a) x=y;
	else
	{
		a++;
		y=malloc(sizeof(int));
	}
}
268
translation_unit
 translation_unit
  external_declaration
   declaration
    declaration_specifiers
     INT
    init_declarator_list
     init_declarator
      declarator
       *
       direct_declarator
        x
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item_list
        block_item_list
         block_item
          declaration
           declaration_specifiers
            INT
           init_declarator_list
            init_declarator
             declarator
              *
              direct_declarator
               y
             initializer1
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            postfix_expression
                             postfix_expression
                              malloc
                             argument_expression_list
                              assignment_expression
                               conditional_expression
                                logical_or_expression
                                 logical_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          cast_expression
                                           unary_expression
                                            type_name
                                             specifier_qualifier_list
                                              INT
        block_item
         statement
          expression_statement
           expression
            assignment_expression
             unary_expression
              postfix_expression
               x
             =
             assignment_expression
              conditional_expression
               logical_or_expression
                logical_and_expression
                 inclusive_or_expression
                  exclusive_or_expression
                   and_expression
                    equality_expression
                     relational_expression
                      shift_expression
                       additive_expression
                        multiplicative_expression
                         cast_expression
                          unary_expression
                           postfix_expression
                            postfix_expression
                             malloc
                            argument_expression_list
                             assignment_expression
                              conditional_expression
                               logical_or_expression
                                logical_and_expression
                                 inclusive_or_expression
                                  exclusive_or_expression
                                   and_expression
                                    equality_expression
                                     relational_expression
                                      shift_expression
                                       additive_expression
                                        multiplicative_expression
                                         cast_expression
                                          unary_expression
                                           type_name
                                            specifier_qualifier_list
                                             INT
       block_item
        declaration
         declaration_specifiers
          INT
         init_declarator_list
          init_declarator
           declarator
            direct_declarator
             a
           initializer1
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           primary_expression
                            I_CONSTANT
      block_item
       statement
        expression_statement
         expression
          assignment_expression
           unary_expression
            *
            cast_expression
             unary_expression
              postfix_expression
               y
           =
           assignment_expression
            conditional_expression
             logical_or_expression
              logical_and_expression
               inclusive_or_expression
                exclusive_or_expression
                 and_expression
                  equality_expression
                   relational_expression
                    shift_expression
                     additive_expression
                      multiplicative_expression
                       cast_expression
                        unary_expression
                         postfix_expression
                          primary_expression
                           I_CONSTANT
     block_item
      statement
       IF ELSE
        expression
         assignment_expression
          conditional_expression
           logical_or_expression
            logical_and_expression
             inclusive_or_expression
              exclusive_or_expression
               and_expression
                equality_expression
                 relational_expression
                  relational_expression
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        *
                        cast_expression
                         unary_expression
                          postfix_expression
                           y
                  shift_expression
                   additive_expression
                    multiplicative_expression
                     cast_expression
                      unary_expression
                       postfix_expression
                        a
        statement
         expression_statement
          expression
           assignment_expression
            unary_expression
             postfix_expression
              x
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           y
        statement
         compound_statement
          block_item_list
           block_item_list
            block_item
             statement
              expression_statement
               expression
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              postfix_expression
                               postfix_expression
                                a
           block_item
            statement
             expression_statement
              expression
               assignment_expression
                unary_expression
                 postfix_expression
                  y
                =
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              postfix_expression
                               postfix_expression
                                malloc
                               argument_expression_list
                                assignment_expression
                                 conditional_expression
                                  logical_or_expression
                                   logical_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            cast_expression
                                             unary_expression
                                              type_name
                                               specifier_qualifier_list
                                                INT
1
=====26fa5b10=====
!!Left:1!!
===dec===

===def===

===use===

===pure===

  To 26fa5cc0
=====26fa5cc0=====
===dec===

===def===

===use===

===pure===

  To 26fa5e20
=====26fa5e20=====
===dec===
3 
===def===
3 
===use===
-1 
===pure===
(3,-1) 
  To 26fa5d70
=====26fa5d70=====
===dec===

===def===

===use===

===pure===

  To 26fa69c0
=====26fa69c0=====
===dec===

===def===

===use===

===pure===

  To 26fa6b20
=====26fa6b20=====
===dec===

===def===
1 
===use===
-2 
===pure===
(1,-2) 
  To 26fa6a70
=====26fa6a70=====
===dec===

===def===

===use===

===pure===

  To 26fa6e40
=====26fa6e40=====
===dec===

===def===

===use===

===pure===

  To 26fa6fa0
=====26fa6fa0=====
===dec===
5 
===def===
5 
===use===
0 
===pure===
(5,0) 
  To 26fa6ef0
=====26fa6ef0=====
===dec===

===def===

===use===

===pure===

  To 26fa7410
=====26fa7410=====
===dec===

===def===

===use===

===pure===

  To 26fa7570
=====26fa7570=====
===dec===

===def===
3 
===use===
0 
===pure===
(3,0) 
  To 26fa74c0
=====26fa74c0=====
===dec===

===def===

===use===

===pure===

  To 26fa7780
=====26fa7780=====
===dec===

===def===

===use===

===pure===

  To 26fa78e0
=====26fa78e0=====
===dec===

===def===

===use===
3 5 
===pure===

  To 26fa7af0
  To 26fa7ed0
=====26fa7af0=====
===dec===

===def===

===use===

===pure===

  To 26fa7c50
=====26fa7c50=====
===dec===

===def===
1 
===use===
3 
===pure===
(1,3) 
  To 26fa7ba0
=====26fa7ba0=====
===dec===

===def===

===use===

===pure===

  To 26fa7990
=====26fa7990=====
===dec===

===def===

===use===

===pure===

  To 26fa7830
=====26fa7830=====
===dec===

===def===

===use===

===pure===

  To 26fa5bc0
=====26fa5bc0=====
!!Right:1!!
===dec===

===def===

===use===

===pure===

=====26fa7ed0=====
!!Left:2!!
===dec===

===def===

===use===

===pure===

  To 26fa8070
=====26fa8070=====
===dec===

===def===

===use===

===pure===

  To 26fa81d0
=====26fa81d0=====
===dec===

===def===

===use===
5 
===pure===

  To 26fa8120
=====26fa8120=====
===dec===

===def===

===use===

===pure===

  To 26fa8320
=====26fa8320=====
===dec===

===def===

===use===

===pure===

  To 26fa8480
=====26fa8480=====
===dec===

===def===
3 
===use===
-3 
===pure===
(3,-3) 
  To 26fa83d0
=====26fa83d0=====
===dec===

===def===

===use===

===pure===

  To 26fa7f80
=====26fa7f80=====
!!Right:2!!
===dec===

===def===

===use===

===pure===

  To 26fa7990
