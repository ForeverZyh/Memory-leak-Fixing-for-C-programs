int *x;
int main()
{
	int *y=malloc(sizeof(int));
	x=malloc(sizeof(int));
	*x=0;
	*y=1;
	if (*x>*y)
	{
		int *z=malloc(sizeof(int));
		x=z;
	}
	else
	{
		x=y;
		free(y);
	}
	return 0;
}337
translation_unit
 translation_unit
  external_declaration
   declaration
    declaration_specifiers
     INT
    init_declarator_list
     init_declarator
      declarator
       *
       direct_declarator
        x
 external_declaration
  function_definition
   declaration_specifiers
    INT
   declarator
    direct_declarator
     direct_declarator
      main
   compound_statement
    block_item_list
     block_item_list
      block_item_list
       block_item_list
        block_item_list
         block_item_list
          block_item
           declaration
            declaration_specifiers
             INT
            init_declarator_list
             init_declarator
              declarator
               *
               direct_declarator
                y
              initializer1
               assignment_expression
                conditional_expression
                 logical_or_expression
                  logical_and_expression
                   inclusive_or_expression
                    exclusive_or_expression
                     and_expression
                      equality_expression
                       relational_expression
                        shift_expression
                         additive_expression
                          multiplicative_expression
                           cast_expression
                            unary_expression
                             function
                              postfix_expression
                               malloc
                              argument_expression_list
                               assignment_expression
                                conditional_expression
                                 logical_or_expression
                                  logical_and_expression
                                   inclusive_or_expression
                                    exclusive_or_expression
                                     and_expression
                                      equality_expression
                                       relational_expression
                                        shift_expression
                                         additive_expression
                                          multiplicative_expression
                                           cast_expression
                                            unary_expression
                                             type_name
                                              specifier_qualifier_list
                                               INT
         block_item
          statement
           expression_statement
            expression
             assignment_expression
              unary_expression
               postfix_expression
                x
              =
              assignment_expression
               conditional_expression
                logical_or_expression
                 logical_and_expression
                  inclusive_or_expression
                   exclusive_or_expression
                    and_expression
                     equality_expression
                      relational_expression
                       shift_expression
                        additive_expression
                         multiplicative_expression
                          cast_expression
                           unary_expression
                            function
                             postfix_expression
                              malloc
                             argument_expression_list
                              assignment_expression
                               conditional_expression
                                logical_or_expression
                                 logical_and_expression
                                  inclusive_or_expression
                                   exclusive_or_expression
                                    and_expression
                                     equality_expression
                                      relational_expression
                                       shift_expression
                                        additive_expression
                                         multiplicative_expression
                                          cast_expression
                                           unary_expression
                                            type_name
                                             specifier_qualifier_list
                                              INT
        block_item
         statement
          expression_statement
           expression
            assignment_expression
             unary_expression
              *
              cast_expression
               unary_expression
                postfix_expression
                 x
             =
             assignment_expression
              conditional_expression
               logical_or_expression
                logical_and_expression
                 inclusive_or_expression
                  exclusive_or_expression
                   and_expression
                    equality_expression
                     relational_expression
                      shift_expression
                       additive_expression
                        multiplicative_expression
                         cast_expression
                          unary_expression
                           postfix_expression
                            primary_expression
                             I_CONSTANT
       block_item
        statement
         expression_statement
          expression
           assignment_expression
            unary_expression
             *
             cast_expression
              unary_expression
               postfix_expression
                y
            =
            assignment_expression
             conditional_expression
              logical_or_expression
               logical_and_expression
                inclusive_or_expression
                 exclusive_or_expression
                  and_expression
                   equality_expression
                    relational_expression
                     shift_expression
                      additive_expression
                       multiplicative_expression
                        cast_expression
                         unary_expression
                          postfix_expression
                           primary_expression
                            I_CONSTANT
      block_item
       statement
        IF ELSE
         expression
          assignment_expression
           conditional_expression
            logical_or_expression
             logical_and_expression
              inclusive_or_expression
               exclusive_or_expression
                and_expression
                 equality_expression
                  relational_expression
                   relational_expression
                    shift_expression
                     additive_expression
                      multiplicative_expression
                       cast_expression
                        unary_expression
                         *
                         cast_expression
                          unary_expression
                           postfix_expression
                            x
                   shift_expression
                    additive_expression
                     multiplicative_expression
                      cast_expression
                       unary_expression
                        *
                        cast_expression
                         unary_expression
                          postfix_expression
                           y
         statement
          compound_statement
           block_item_list
            block_item_list
             block_item
              declaration
               declaration_specifiers
                INT
               init_declarator_list
                init_declarator
                 declarator
                  *
                  direct_declarator
                   z
                 initializer1
                  assignment_expression
                   conditional_expression
                    logical_or_expression
                     logical_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              cast_expression
                               unary_expression
                                function
                                 postfix_expression
                                  malloc
                                 argument_expression_list
                                  assignment_expression
                                   conditional_expression
                                    logical_or_expression
                                     logical_and_expression
                                      inclusive_or_expression
                                       exclusive_or_expression
                                        and_expression
                                         equality_expression
                                          relational_expression
                                           shift_expression
                                            additive_expression
                                             multiplicative_expression
                                              cast_expression
                                               unary_expression
                                                type_name
                                                 specifier_qualifier_list
                                                  INT
            block_item
             statement
              expression_statement
               expression
                assignment_expression
                 unary_expression
                  postfix_expression
                   x
                 =
                 assignment_expression
                  conditional_expression
                   logical_or_expression
                    logical_and_expression
                     inclusive_or_expression
                      exclusive_or_expression
                       and_expression
                        equality_expression
                         relational_expression
                          shift_expression
                           additive_expression
                            multiplicative_expression
                             cast_expression
                              unary_expression
                               postfix_expression
                                z
         statement
          compound_statement
           block_item_list
            block_item_list
             block_item
              statement
               expression_statement
                expression
                 assignment_expression
                  unary_expression
                   postfix_expression
                    x
                  =
                  assignment_expression
                   conditional_expression
                    logical_or_expression
                     logical_and_expression
                      inclusive_or_expression
                       exclusive_or_expression
                        and_expression
                         equality_expression
                          relational_expression
                           shift_expression
                            additive_expression
                             multiplicative_expression
                              cast_expression
                               unary_expression
                                postfix_expression
                                 y
            block_item
             statement
              expression_statement
               expression
                assignment_expression
                 conditional_expression
                  logical_or_expression
                   logical_and_expression
                    inclusive_or_expression
                     exclusive_or_expression
                      and_expression
                       equality_expression
                        relational_expression
                         shift_expression
                          additive_expression
                           multiplicative_expression
                            cast_expression
                             unary_expression
                              function
                               postfix_expression
                                free
                               argument_expression_list
                                assignment_expression
                                 conditional_expression
                                  logical_or_expression
                                   logical_and_expression
                                    inclusive_or_expression
                                     exclusive_or_expression
                                      and_expression
                                       equality_expression
                                        relational_expression
                                         shift_expression
                                          additive_expression
                                           multiplicative_expression
                                            cast_expression
                                             unary_expression
                                              postfix_expression
                                               y
     block_item
      statement
       RETURN
        expression
         assignment_expression
          conditional_expression
           logical_or_expression
            logical_and_expression
             inclusive_or_expression
              exclusive_or_expression
               and_expression
                equality_expression
                 relational_expression
                  shift_expression
                   additive_expression
                    multiplicative_expression
                     cast_expression
                      unary_expression
                       postfix_expression
                        primary_expression
                         I_CONSTANT
1
=====8fccda10=====
!!Left:1!!
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccdd90
=====8fccdd90=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcce050
=====8fcce050=====
line=4
tag=-1
call_index=-1
===G1===
===dec===
4 
===def===

===use===

===pure===

  To 8fcce1b0
=====8fcce1b0=====
line=4
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===
[-1 unary:1] 
===pure===

  To 8fcce930
=====8fcce930=====
line=4
tag=-1
call_index=-1
===G1===
===dec===

===def===
[4 unary:0] 
===use===
[-1 unary:1] 
===pure===
([4 unary:0],[-1 unary:1]) 
  To 8fccdef0
=====8fccdef0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccece0
=====8fccece0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccefa0
=====8fccefa0=====
line=5
tag=-1
call_index=-1
===G1===
===dec===

===def===
[2 unary:0] 
===use===
[-2 unary:1] 
===pure===
([2 unary:0],[-2 unary:1]) 
  To 8fccee40
=====8fccee40=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccf4e0
=====8fccf4e0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccf7a0
=====8fccf7a0=====
line=6
tag=-1
call_index=-1
===G1===
===dec===

===def===
[2 unary:1] 
===use===
[0 unary:0] 
===pure===
([2 unary:1],[0 unary:0]) 
  To 8fccf640
=====8fccf640=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccfbd0
=====8fccfbd0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fccfe90
=====8fccfe90=====
line=7
tag=-1
call_index=-1
===G1===
===dec===

===def===
[4 unary:1] 
===use===
[0 unary:0] 
===pure===
([4 unary:1],[0 unary:0]) 
  To 8fccfd30
=====8fccfd30=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd0200
=====8fcd0200=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd0620
=====8fcd0620=====
line=8
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===
[2 unary:1] [4 unary:1] 
===pure===

  To 8fcd0850
  To 8fcd1b30
=====8fcd0850=====
!!Left:2!!
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd0b30
=====8fcd0b30=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd0df0
=====8fcd0df0=====
line=10
tag=-1
call_index=-1
===G1===
===dec===
6 
===def===

===use===

===pure===

  To 8fcd0f50
=====8fcd0f50=====
line=10
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===
[-3 unary:1] 
===pure===

  To 8fcd10f0
=====8fcd10f0=====
line=10
tag=-1
call_index=-1
===G1===
===dec===

===def===
[6 unary:0] 
===use===
[-3 unary:1] 
===pure===
([6 unary:0],[-3 unary:1]) 
  To 8fcd0c90
=====8fcd0c90=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd1460
=====8fcd1460=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd1720
=====8fcd1720=====
line=11
tag=-1
call_index=-1
===G1===
===dec===

===def===
[2 unary:0] 
===use===
[6 unary:0] 
===pure===
([2 unary:0],[6 unary:0]) 
  To 8fcd15c0
=====8fcd15c0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd09b0
=====8fcd09b0=====
!!Right:2!!
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd04c0
=====8fcd04c0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd0360
=====8fcd0360=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd2c10
=====8fcd2c10=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd3060
=====8fcd3060=====
line=18
tag=-1
call_index=-1
===G1===
===dec===

===def===
[1 unary:0] 
===use===
[0 unary:0] 
===pure===
([1 unary:0],[0 unary:0]) 
  To 8fccdb70
=====8fccdb70=====
!!Right:1!!
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

=====8fcd1b30=====
!!Left:3!!
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd1e30
=====8fcd1e30=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd20f0
=====8fcd20f0=====
line=15
tag=-1
call_index=-1
===G1===
===dec===

===def===
[2 unary:0] 
===use===
[4 unary:0] 
===pure===
([2 unary:0],[4 unary:0]) 
  To 8fcd1f90
=====8fcd1f90=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd2440
=====8fcd2440=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd2700
=====8fcd2700=====
line=16
tag=-1
call_index=-1
===G1===
===dec===

===def===
[4 unary:0] 
===use===
[4 unary:0] 
===pure===
([4 unary:0],[-999999 unary:1]) 
  To 8fcd25a0
=====8fcd25a0=====
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd1c90
=====8fcd1c90=====
!!Right:3!!
line=0
tag=-1
call_index=-1
===G1===
===dec===

===def===

===use===

===pure===

  To 8fcd04c0
pointer analysis!========================
=====8fcd3450=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===
1 
===def===

===use===

===pure===

  To 8fccd890
=====8fccd890=====
line=1
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===
2 
===def===

===use===

===pure===

  To 8fcd3630
=====8fcd3630=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd38f0
=====8fcd38f0=====
!!Left:100001!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd3ab0
=====8fcd3ab0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd3ca0
=====8fcd3ca0=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===
4 
===def===

===use===

===pure===

  To 8fcd3e60
=====8fcd3e60=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2:
  3:
  4:
===dec===

===def===

===use===
[-1 unary:1] 
===pure===

  To 8fcd4040
=====8fcd4040=====
line=100004
tag=-1
call_index=-1
===G1===
  1:
  2:
  3: -1
  4:
===dec===

===def===
[3 unary:0] 
===use===
[-1 unary:1] 
===pure===
([3 unary:0],[-1 unary:1]) 
  To 8fcd43d0
=====8fcd43d0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd4590
=====8fcd4590=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2:
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd4750
=====8fcd4750=====
line=100005
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===
[2 unary:0] 
===use===
[-2 unary:1] 
===pure===
([2 unary:0],[-2 unary:1]) 
  To 8fcd4a80
=====8fcd4a80=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd4c40
=====8fcd4c40=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd4e00
=====8fcd4e00=====
line=100006
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===
[2 unary:1] 
===use===
[0 unary:0] 
===pure===
([2 unary:1],[0 unary:0]) 
  To 8fcd51f0
=====8fcd51f0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd53b0
=====8fcd53b0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd5570
=====8fcd5570=====
line=100007
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===
[3 unary:1] 
===use===
[0 unary:0] 
===pure===
([3 unary:1],[0 unary:0]) 
  To 8fcd58a0
=====8fcd58a0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd5a60
=====8fcd5a60=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd5c20
=====8fcd5c20=====
line=100008
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===
[2 unary:1] [3 unary:1] 
===pure===

  To 8fcd5e90
  To 8fcd7e40
=====8fcd5e90=====
!!Left:100002!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd6050
=====8fcd6050=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd6210
=====8fcd6210=====
line=100010
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===
6 
===def===

===use===

===pure===

  To 8fcd63f0
=====8fcd63f0=====
line=100010
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===
[-3 unary:1] 
===pure===

  To 8fcd6610
=====8fcd6610=====
line=100010
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
===dec===

===def===
[4 unary:0] 
===use===
[-3 unary:1] 
===pure===
([4 unary:0],[-3 unary:1]) 
  To 8fcd6940
=====8fcd6940=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
===dec===

===def===

===use===

===pure===

  To 8fcd6c80
=====8fcd6c80=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4: -3
===dec===

===def===

===use===

===pure===

  To 8fcd6de0
=====8fcd6de0=====
line=100011
tag=-1
call_index=-1
===G1===
  1:
  2: -3 -2
  3: -1
  4: -3 -2
===dec===

===def===
[2 unary:0] 
===use===
[4 unary:0] 
===pure===
([2 unary:0],[4 unary:0]) 
  To 8fcd70b0
=====8fcd70b0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2 -3
  3: -1
  4: -2 -3
===dec===

===def===

===use===

===pure===

  To 8fcd7270
=====8fcd7270=====
!!Right:100002!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -3 -2
  3: -1
  4: -3 -2
===dec===

===def===

===use===

===pure===

  To 8fcd7430
=====8fcd7430=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -1 -3 -2
  3: -999999 -1 -3 -2
  4: -999999 -1 -3 -2
===dec===

===def===

===use===

===pure===

  To 8fcd75f0
=====8fcd75f0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -3 -2 -1
  3: -999999 -3 -2 -1
  4: -999999 -3 -2 -1
===dec===

===def===

===use===

===pure===

  To 8fcd77b0
=====8fcd77b0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -2 -3 -1
  3: -999999 -2 -3 -1
  4: -999999 -2 -3 -1
===dec===

===def===

===use===

===pure===

  To 8fcd7970
=====8fcd7970=====
line=100018
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -3 -2 -1
  3: -999999 -3 -2 -1
  4: -999999 -3 -2 -1
===dec===

===def===
[1 unary:0] 
===use===
[0 unary:0] 
===pure===
([1 unary:0],[0 unary:0]) 
  To 8fcd7ca0
=====8fcd7ca0=====
!!Right:100001!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -2 -3 -1
  3: -999999 -2 -3 -1
  4: -999999 -2 -3 -1
===dec===

===def===

===use===

===pure===

  To 8fcd3790
=====8fcd3790=====
line=0
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -3 -2 -1
  3: -999999 -3 -2 -1
  4: -999999 -3 -2 -1
===dec===

===def===

===use===

===pure===

=====8fcd7e40=====
!!Left:100003!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd8000
=====8fcd8000=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2
  3: -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd81c0
=====8fcd81c0=====
line=100015
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4:
===dec===

===def===
[2 unary:0] 
===use===
[3 unary:0] 
===pure===
([2 unary:0],[3 unary:0]) 
  To 8fcd84f0
=====8fcd84f0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2 -1
  3: -2 -1
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd86b0
=====8fcd86b0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -1 -2
  3: -1 -2
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd8870
=====8fcd8870=====
line=100016
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -1 -2
  3: -999999 -1 -2
  4:
===dec===

===def===
[3 unary:0] 
===use===
[3 unary:0] 
===pure===
([3 unary:0],[-999999 unary:1]) 
  To 8fcd8ba0
=====8fcd8ba0=====
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -2 -1 -999999
  3: -2 -1 -999999
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd8d60
=====8fcd8d60=====
!!Right:100003!!
line=100000
tag=-1
call_index=-1
===G1===
  1:
  2: -999999 -1 -2
  3: -999999 -1 -2
  4:
===dec===

===def===

===use===

===pure===

  To 8fcd7430
